import { CONFIG } from '../utils/constants.js';
import { showNotification } from '../utils/helpers.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export class ProductService {
  constructor() {
    this.products = new Map();
    this.isInitialized = false;
    this.currentDataUrl = null;
    this.dataSources = this.getDataSources();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   */
  getDataSources() {
    const repoName = 'ProgressSAP.github.io';
    const baseUrl = window.location.origin;
    
    return [
      // 1. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–æ—Å–Ω–æ–≤–Ω–æ–π)
      './data.json',
      
      // 2. –î–ª—è GitHub Pages —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      `/${repoName}/data.json`,
      
      // 3. –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
      `${baseUrl}/${repoName}/data.json`,
      
      // 4. RAW GitHub URL
      `https://raw.githubusercontent.com/svidovichss-droid/${repoName}/main/data.json`,
      
      // 5. Fallback
      `https://raw.githubusercontent.com/svidovichss-droid/${repoName}/refs/heads/main/data.json`
    ];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
   */
  async loadProducts() {
    console.group('üîÑ ProductService: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('üì° –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const isOnline = navigator.onLine;
      console.log('üì∂ Online —Å—Ç–∞—Ç—É—Å:', isOnline);
      
      if (isOnline) {
        console.log('üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Å–µ—Ç–∏...');
        await this.loadFromNetwork();
      } else {
        console.log('üíæ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º, –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞...');
        await this.loadFromCache();
      }

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${this.products.size}`);
      console.groupEnd();
      return this.products;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      console.groupEnd();
      
      // –ö–∞—Å–∫–∞–¥–Ω—ã–π fallback
      try {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞...');
        await this.loadFromCache();
        showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      } catch (cacheError) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–∞–Ω–Ω—ã—Ö...');
        await this.loadFallbackData();
      }
      
      return this.products;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏ —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  async loadFromNetwork() {
    console.group('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Å–µ—Ç–∏');
    
    let lastError = null;
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    for (const url of this.dataSources) {
      try {
        console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑: ${url}`);
        const data = await this.tryLoadFromUrl(url);
        
        this.currentDataUrl = url;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑: ${url}`);
        console.groupEnd();
        return data;
        
      } catch (error) {
        console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${url}:`, error.message);
        lastError = error;
        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
      }
    }
    
    console.error('üí• –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    console.groupEnd();
    throw lastError || new Error('–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }

  /**
   * –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL
   */
  async tryLoadFromUrl(url) {
    console.log(`üì° –ó–∞–ø—Ä–æ—Å –∫: ${url}`);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç
    
    try {
      const response = await fetch(url, {
        signal: controller.signal,
        mode: 'cors', // –î–æ–±–∞–≤–∏–ª CORS mode
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache',
          'Accept': 'application/json'
        }
      });
      
      clearTimeout(timeoutId);
      
      console.log(`üìä –û—Ç–≤–µ—Ç –æ—Ç ${url}:`, {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        type: response.type,
        url: response.url
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π Content-Type:', contentType);
        // –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π content-type
      }
      
      const text = await response.text();
      console.log('üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', text.substring(0, 500));
      
      if (!text.trim()) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }
      
      let productsData;
      try {
        productsData = JSON.parse(text);
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
        throw new Error(`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: ${parseError.message}`);
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      this.validateDataStructure(productsData);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      await this.processProductsData(productsData);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
      this.saveToCache(productsData);
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${productsData.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ ${url}`);
      return productsData;
      
    } catch (error) {
      clearTimeout(timeoutId);
      
      if (error.name === 'AbortError') {
        throw new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}`);
      }
      
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  validateDataStructure(data) {
    console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    if (!data) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
    
    if (!Array.isArray(data)) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }
    
    if (data.length === 0) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (data.length > 0) {
      const sample = data[0];
      const requiredFields = ['–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', '–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)', '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏'];
      
      for (const field of requiredFields) {
        if (!(field in sample)) {
          console.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: ${field}`);
        }
      }
    }
    
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω–∞');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
   */
  saveToCache(productsData) {
    try {
      const cacheData = {
        data: productsData,
        timestamp: Date.now(),
        version: CONFIG.VERSION,
        source: this.currentDataUrl
      };
      
      localStorage.setItem(CONFIG.CACHE_KEYS.PRODUCTS, JSON.stringify(cacheData));
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  async loadFromCache() {
    console.group('üíæ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞');
    
    try {
      const cached = localStorage.getItem(CONFIG.CACHE_KEYS.PRODUCTS);
      
      if (!cached) {
        throw new Error('–ö—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }

      const cacheData = JSON.parse(cached);
      console.log('üìÖ –í—Ä–µ–º—è –∫—ç—à–∞:', new Date(cacheData.timestamp).toLocaleString());
      console.log('üîó –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—ç—à–∞:', cacheData.source);
      
      const isExpired = Date.now() - cacheData.timestamp > CONFIG.CACHE_DURATION;
      
      if (isExpired) {
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      } else {
        console.log('‚úÖ –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω');
      }

      await this.processProductsData(cacheData.data);
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
      console.groupEnd();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞:', error);
      console.groupEnd();
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö
   */
  async loadFallbackData() {
    console.group('üÜò –ó–∞–≥—Ä—É–∑–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö');
    
    try {
      await this.processProductsData(CONFIG.FALLBACK_DATA);
      console.log('‚úÖ Fallback –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      console.groupEnd();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', error);
      console.groupEnd();
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö', 'error');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  async processProductsData(productsData) {
    console.group('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    this.products.clear();

    if (!Array.isArray(productsData)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤');
    }

    let validProducts = 0;
    let invalidProducts = 0;

    for (const [index, product] of productsData.entries()) {
      try {
        const normalizedProduct = this.normalizeProduct(product);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!normalizedProduct.code || !normalizedProduct.name) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ${index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`, product);
          invalidProducts++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if (this.products.has(normalizedProduct.code)) {
          console.warn(`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∫–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: ${normalizedProduct.code}`);
        }
        
        this.products.set(normalizedProduct.code, normalizedProduct);
        validProducts++;
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç ${index}:`, product, error);
        invalidProducts++;
      }
    }

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${validProducts} –≤–∞–ª–∏–¥–Ω—ã—Ö, ${invalidProducts} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö`);
    
    if (validProducts === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.groupEnd();
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  normalizeProduct(product) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    const code = String(product['–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏'] || '').trim();
    const name = String(product['–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)'] || '').trim();
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
    let shelfLife = 0;
    const shelfLifeValue = product['–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏'];
    if (shelfLifeValue != null) {
      shelfLife = parseInt(shelfLifeValue);
      if (isNaN(shelfLife) || shelfLife < 0) {
        console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: ${shelfLifeValue}`);
        shelfLife = 0;
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —É–ø–∞–∫–æ–≤–∫–µ
    let quantityPerPack = 0;
    const quantityValue = product['–®—Ç—É–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ'];
    if (quantityValue != null) {
      quantityPerPack = parseInt(quantityValue);
      if (isNaN(quantityPerPack) || quantityPerPack < 0) {
        quantityPerPack = 0;
      }
    }
    
    const barcode = String(product['–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏'] || '').trim();
    const manufacturer = String(product['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'] || '').trim();
    const standard = String(product['–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞'] || '').trim();

    return {
      code,
      name,
      shelfLife,
      quantityPerPack,
      barcode,
      manufacturer,
      standard,
      lastUpdated: Date.now()
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  searchProducts(query) {
    if (!query || query.length < 2) {
      return [];
    }

    const searchTerm = query.toLowerCase().trim();
    const results = [];

    for (const product of this.products.values()) {
      const matchesCode = product.code.toLowerCase().includes(searchTerm);
      const matchesName = product.name.toLowerCase().includes(searchTerm);
      
      if (matchesCode || matchesName) {
        results.push(product);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    return results.sort((a, b) => {
      const aCodeMatch = a.code.toLowerCase().startsWith(searchTerm);
      const bCodeMatch = b.code.toLowerCase().startsWith(searchTerm);
      
      if (aCodeMatch && !bCodeMatch) return -1;
      if (!aCodeMatch && bCodeMatch) return 1;
      
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      return a.name.localeCompare(b.name);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–æ–¥—É
   */
  getProductByCode(code) {
    return this.products.get(code) || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  getAllProducts() {
    return Array.from(this.products.values());
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async forceRefresh() {
    console.group('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    
    try {
      showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à
      localStorage.removeItem(CONFIG.CACHE_KEYS.PRODUCTS);
      console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await this.loadFromNetwork();
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
      console.groupEnd();
      
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
      console.groupEnd();
      
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async synchronize() {
    if (!navigator.onLine) {
      console.log('üì¥ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –ø—Ä–æ–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return false;
    }

    try {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      await this.loadFromNetwork();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    localStorage.removeItem(CONFIG.CACHE_KEYS.PRODUCTS);
    this.products.clear();
    console.log('üóëÔ∏è –ö—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  getDiagnostics() {
    const cacheData = localStorage.getItem(CONFIG.CACHE_KEYS.PRODUCTS);
    let cacheInfo = null;
    
    if (cacheData) {
      try {
        const parsed = JSON.parse(cacheData);
        cacheInfo = {
          timestamp: new Date(parsed.timestamp).toLocaleString(),
          source: parsed.source,
          dataLength: parsed.data ? parsed.data.length : 0,
          size: new Blob([cacheData]).size
        };
      } catch (error) {
        cacheInfo = { error: error.message };
      }
    }
    
    return {
      currentDataUrl: this.currentDataUrl,
      productsCount: this.products.size,
      cache: cacheInfo,
      dataSources: this.dataSources,
      onlineStatus: navigator.onLine
    };
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  async testDataAvailability() {
    console.group('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    const results = [];
    
    for (const url of this.dataSources) {
      try {
        console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${url}`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);
        
        const startTime = Date.now();
        const response = await fetch(url, { 
          signal: controller.signal,
          mode: 'cors',
          cache: 'no-cache'
        });
        const endTime = Date.now();
        
        clearTimeout(timeoutId);
        
        let data = null;
        if (response.ok) {
          try {
            const text = await response.text();
            data = JSON.parse(text);
          } catch (parseError) {
            data = { error: parseError.message };
          }
        }
        
        results.push({
          url,
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          responseTime: endTime - startTime,
          data: data && Array.isArray(data) ? 
            { length: data.length, sample: data[0] } : 
            data
        });
        
        console.log(`‚úÖ ${url}: ${response.status} (${endTime - startTime}ms)`);
        
      } catch (error) {
        results.push({
          url,
          error: error.message,
          ok: false
        });
        
        console.log(`‚ùå ${url}: ${error.message}`);
      }
    }
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    console.groupEnd();
    
    return results;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.productService = new ProductService();
