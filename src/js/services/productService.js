import { CONFIG } from '../utils/constants.js';
import { showNotification } from '../utils/helpers.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export class ProductService {
  constructor() {
    this.products = new Map();
    this.isInitialized = false;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
   */
  async loadProducts() {
    console.log('üîÑ Starting data loading process...');
    
    try {
      const isOnline = navigator.onLine;
      console.log('üì∂ Online status:', isOnline);
      
      if (isOnline) {
        console.log('üåê Attempting to load from network...');
        await this.loadFromNetwork();
      } else {
        console.log('üíæ Offline mode, loading from cache...');
        await this.loadFromCache();
      }

      console.log(`‚úÖ Successfully loaded ${this.products.size} products`);
      return this.products;
      
    } catch (error) {
      console.error('‚ùå Error loading products:', error);
      console.log('üîÑ Falling back to cached or default data...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à, –ø–æ—Ç–æ–º fallback
      try {
        await this.loadFromCache();
        showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      } catch (cacheError) {
        console.log('‚ùå Cache also failed, using fallback data...');
        await this.loadFallbackData();
      }
      
      return this.products;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ç–∏
   */
  async loadFromNetwork() {
    try {
      console.log('üîç Fetching data from:', CONFIG.JSON_URL);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è fetch
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
      const response = await fetch(CONFIG.JSON_URL, {
        signal: controller.signal,
        cache: 'no-cache',
        headers: {
          'Cache-Control': 'no-cache'
        }
      });
      
      clearTimeout(timeoutId);

      console.log('üì° Response status:', response.status, response.statusText);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const productsData = await response.json();
      console.log('üìä Received data:', productsData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!Array.isArray(productsData)) {
        throw new Error('Invalid data format: expected array');
      }
      
      if (productsData.length === 0) {
        console.warn('‚ö†Ô∏è Received empty products array');
      }

      await this.processProductsData(productsData);
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
      localStorage.setItem(CONFIG.CACHE_KEYS.PRODUCTS, JSON.stringify({
        data: productsData,
        timestamp: Date.now(),
        version: CONFIG.VERSION
      }));

      console.log('‚úÖ Products loaded from network');
      showNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
      
    } catch (error) {
      console.error('‚ùå Network load failed:', error);
      
      if (error.name === 'AbortError') {
        throw new Error('Request timeout - network is too slow');
      }
      
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  async loadFromCache() {
    try {
      console.log('üíæ Checking cache...');
      const cached = localStorage.getItem(CONFIG.CACHE_KEYS.PRODUCTS);
      
      if (!cached) {
        throw new Error('No cached data available');
      }

      const cacheData = JSON.parse(cached);
      console.log('üìÖ Cache timestamp:', new Date(cacheData.timestamp));
      
      const isExpired = Date.now() - cacheData.timestamp > CONFIG.CACHE_DURATION;
      
      if (isExpired) {
        console.warn('‚ö†Ô∏è Using expired cache data');
        showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      } else {
        console.log('‚úÖ Cache is fresh');
      }

      await this.processProductsData(cacheData.data);
      console.log('‚úÖ Products loaded from cache');
      
    } catch (error) {
      console.error('‚ùå Cache load failed:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ fallback –¥–∞–Ω–Ω—ã—Ö
   */
  async loadFallbackData() {
    try {
      console.log('üÜò Loading fallback data...');
      await this.processProductsData(CONFIG.FALLBACK_DATA);
      console.log('‚úÖ Fallback data loaded');
      showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
    } catch (error) {
      console.error('‚ùå Fallback data load failed:', error);
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö', 'error');
      throw new Error('Unable to load any product data');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  async processProductsData(productsData) {
    console.log('üîß Processing products data...');
    this.products.clear();

    if (!Array.isArray(productsData)) {
      throw new Error('Invalid data format: expected array');
    }

    let validProducts = 0;
    let invalidProducts = 0;

    for (const product of productsData) {
      try {
        const normalizedProduct = this.normalizeProduct(product);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!normalizedProduct.code || !normalizedProduct.name) {
          console.warn('‚ö†Ô∏è Skipping product with missing required fields:', product);
          invalidProducts++;
          continue;
        }
        
        this.products.set(normalizedProduct.code, normalizedProduct);
        validProducts++;
        
      } catch (error) {
        console.warn('‚ö†Ô∏è Skipping invalid product:', product, error);
        invalidProducts++;
      }
    }

    console.log(`‚úÖ Processed ${validProducts} valid products, ${invalidProducts} invalid`);
    
    if (validProducts === 0) {
      throw new Error('No valid products found in data');
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  normalizeProduct(product) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const code = product['–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏']?.toString().trim() || '';
    const name = product['–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)']?.toString().trim() || '';
    const shelfLife = parseInt(product['–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏']) || 0;
    const quantityPerPack = parseInt(product['–®—Ç—É–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ']) || 0;
    const barcode = product['–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏']?.toString().trim() || '';
    const manufacturer = product['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']?.toString().trim() || '';
    const standard = product['–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞']?.toString().trim() || '';

    return {
      code,
      name,
      shelfLife,
      quantityPerPack,
      barcode,
      manufacturer,
      standard,
      lastUpdated: Date.now()
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  searchProducts(query) {
    if (!query || query.length < 2) {
      return [];
    }

    const searchTerm = query.toLowerCase().trim();
    const results = [];

    for (const product of this.products.values()) {
      const matchesCode = product.code.toLowerCase().includes(searchTerm);
      const matchesName = product.name.toLowerCase().includes(searchTerm);
      
      if (matchesCode || matchesName) {
        results.push(product);
      }
    }

    return results.sort((a, b) => {
      const aCodeMatch = a.code.toLowerCase().startsWith(searchTerm);
      const bCodeMatch = b.code.toLowerCase().startsWith(searchTerm);
      
      if (aCodeMatch && !bCodeMatch) return -1;
      if (!aCodeMatch && bCodeMatch) return 1;
      
      return a.name.localeCompare(b.name);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–æ–¥—É
   */
  getProductByCode(code) {
    return this.products.get(code) || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  getAllProducts() {
    return Array.from(this.products.values());
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async forceRefresh() {
    try {
      showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
      localStorage.removeItem(CONFIG.CACHE_KEYS.PRODUCTS);
      await this.loadFromNetwork();
      console.log('‚úÖ Products force refreshed');
      return true;
    } catch (error) {
      console.error('‚ùå Force refresh failed:', error);
      showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async synchronize() {
    if (!navigator.onLine) {
      console.log('üì¥ Offline - skipping synchronization');
      return false;
    }

    try {
      await this.loadFromNetwork();
      console.log('‚úÖ Products synchronized');
      return true;
    } catch (error) {
      console.error('‚ùå Synchronization failed:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    localStorage.removeItem(CONFIG.CACHE_KEYS.PRODUCTS);
    this.products.clear();
    console.log('üóëÔ∏è Product cache cleared');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      total: this.products.size,
      cacheTimestamp: localStorage.getItem(CONFIG.CACHE_KEYS.PRODUCTS) 
        ? JSON.parse(localStorage.getItem(CONFIG.CACHE_KEYS.PRODUCTS)).timestamp 
        : null
    };
  }
}