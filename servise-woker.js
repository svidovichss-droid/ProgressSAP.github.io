const CACHE_NAME = 'progress-calculator-v3.1';
const STATIC_CACHE = 'progress-static-v3.1';

/**
 * Service Worker –¥–ª—è PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class CalculatorServiceWorker {
  constructor() {
    this.version = '3.1.0';
    this.init();
  }

  async init() {
    self.addEventListener('install', this.handleInstall.bind(this));
    self.addEventListener('activate', this.handleActivate.bind(this));
    self.addEventListener('fetch', this.handleFetch.bind(this));
    
    console.log('üõ†Ô∏è Service Worker initialized');
  }

  async handleInstall(event) {
    console.log('üîß Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞');
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    event.waitUntil(
      caches.open(STATIC_CACHE).then((cache) => {
        return cache.addAll([
          './',
          './index.html',
          './manifest.json',
          './src/styles/styles.css'
        ]);
      })
    );
    
    event.waitUntil(self.skipWaiting());
  }

  async handleActivate(event) {
    console.log('üéØ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è');
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–µ–π
    event.waitUntil(
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== CACHE_NAME && cacheName !== STATIC_CACHE) {
              console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
    );
    
    event.waitUntil(self.clients.claim());
  }

  async handleFetch(event) {
    const { request } = event;
    const url = new URL(request.url);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
    if (request.method !== 'GET') {
      return;
    }

    // –î–ª—è data.json –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "–°–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –ø–æ—Ç–æ–º –∫—ç—à"
    if (url.pathname.endsWith('data.json')) {
      event.respondWith(this.handleDataRequest(request));
      return;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - "–°–Ω–∞—á–∞–ª–∞ –∫—ç—à, –ø–æ—Ç–æ–º —Å–µ—Ç—å"
    event.respondWith(this.handleStaticRequest(request));
  }

  async handleDataRequest(request) {
    const cache = await caches.open(CACHE_NAME);
    
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–µ—Ç—å first —Å CORS
      const networkResponse = await fetch(request, {
        mode: 'cors',
        cache: 'no-cache'
      });
      
      if (networkResponse.ok) {
        console.log('‚úÖ Service Worker: –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ç–∏');
        
        // –ö—ç—à–∏—Ä—É–µ–º —Å–≤–µ–∂–∏–π –æ—Ç–≤–µ—Ç
        await cache.put(request, networkResponse.clone());
        return networkResponse;
      }
      throw new Error('Network response not ok');
    } catch (error) {
      console.log('‚ùå Service Worker: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø—Ä–æ–±—É–µ–º –∫—ç—à');
      
      // –ü—Ä–æ–±—É–µ–º –∫—ç—à
      const cachedResponse = await cache.match(request);
      
      if (cachedResponse) {
        console.log('üíæ Service Worker: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
        return cachedResponse;
      }
      
      // Fallback
      console.log('üÜò Service Worker: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
      return new Response(JSON.stringify(this.getFallbackData()), {
        headers: { 
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
    }
  }

  async handleStaticRequest(request) {
    const cache = await caches.open(STATIC_CACHE);
    const cachedResponse = await cache.match(request);
    
    if (cachedResponse) {
      return cachedResponse;
    }
    
    try {
      const networkResponse = await fetch(request);
      if (networkResponse.ok) {
        await cache.put(request, networkResponse.clone());
      }
      return networkResponse;
    } catch (error) {
      // Fallback –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (request.url.includes('/ProgressSAP.github.io/') || request.url === self.location.origin + '/') {
        return caches.match('./index.html');
      }
      return new Response('Not found', { status: 404 });
    }
  }

  getFallbackData() {
    return [
      {
        "–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏": "000001",
        "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)": "–ú–æ–ª–æ–∫–æ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ 3,2% (fallback)",
        "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏": 5,
        "–®—Ç—É–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ": 20,
        "–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏": "4601234567890",
        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç ‚Ññ1",
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞": "–ì–û–°–¢ 31450-2020"
      },
      {
        "–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏": "000002",
        "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)": "–ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π 2,5% (fallback)",
        "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏": 14,
        "–®—Ç—É–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ": 12,
        "–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏": "4601234567891",
        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–ú–æ–ª–æ—á–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç ‚Ññ1",
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞": "–¢–£ 10.51.10-001-123456-2021"
      },
      {
        "–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏": "000003",
        "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—Ä—É—Å—Å–∫–æ–µ)": "–°—ã—Ä –†–æ—Å—Å–∏–π—Å–∫–∏–π 50% (fallback)",
        "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏": 30,
        "–®—Ç—É–∫ –≤ —É–ø–∞–∫–æ–≤–∫–µ": 8,
        "–®—Ç—Ä–∏—Ö–∫–æ–¥ —É–ø–∞–∫–æ–≤–∫–∏": "4601234567892",
        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–°—ã—Ä–æ–¥–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ '–í–æ–ª–≥–∞'",
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞": "–ì–û–°–¢ 32260-2013"
      }
    ];
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
if ('serviceWorker' in navigator) {
  new CalculatorServiceWorker();
}
